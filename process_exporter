#!/usr/bin/perl

use strict;
use warnings;
use feature qw( say );

use Getopt::Long;
use IO::Async::Signal;
use IO::Async::Loop;
use Net::Async::HTTP::Server::PSGI;
use Net::Prometheus 0.05;
use YAML;

GetOptions(
   'C|config-file=s' => \( my $CONFIG_FILE = "process_exporter.yaml" ),
   'p|port=i'        => \( my $PORT = 9124 ),
) or exit 1;

my $CONFIG = YAML::LoadFile( $CONFIG_FILE );

my $loop = IO::Async::Loop->new;

my $prometheus = Net::Prometheus->new;

my %collectors_by_name;
reapply_config();

$loop->add( IO::Async::Signal->new(
   name => "HUP",
   on_receipt => sub {
      say "Reloading config due to SIGHUP";

      eval { $CONFIG = YAML::LoadFile( $CONFIG_FILE ); 1 } or do {
         say "Unable to load config - $@";
         return;
      };

      reapply_config();
   }
) );

my $server = Net::Async::HTTP::Server::PSGI->new(
   app => $prometheus->psgi_app
);
$loop->add( $server );

$server->listen(
   socktype => "stream",
   service  => $PORT,
)->get;

say "Listening for metrics on http://[::0]:" . $server->read_handle->sockport;

$loop->run;

sub reapply_config
{
   # First create new watchers
   my $processes = $CONFIG->{processes};

   foreach my $name ( keys %$processes ) {
      next if $collectors_by_name{$name};

      my $config = $processes->{$name};
      my $collector = Net::Prometheus::ProcessCollector->new(
         pid    => $config->{pid},
         prefix => "exported_process",
         labels => [ exported_job => $name ],
      );

      say "Now watching $name(" . $config->{pid} . ")";
      $prometheus->register( $collectors_by_name{$name} = $collector );
   }

   # TODO: now reconfigure existing ones

   foreach my $name ( keys %collectors_by_name ) {
      next if $processes->{$name};

      say "No longer watching $name";
      $prometheus->unregister( delete $collectors_by_name{$name} );
   }
}
